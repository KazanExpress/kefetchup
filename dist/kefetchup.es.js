const safeAppend=(e,...t)=>[e].concat(t.filter((e=>null!=e)).map(String)).join("\n");class ResponseError extends Error{constructor(e,t,o,r){super(e),this.status=t,this.data=o,this.request=r,Object.setPrototypeOf(this,ResponseError.prototype),this.name="ResponseError";}toString(){return safeAppend(this.name+": "+this.message,this.data,this.request)}}class ResponseException extends ResponseError{constructor(e,t,o){super(e,t,o),this.name="ResponseException";}}var ResponseErrors;!function(e){e[e.BadRequest=400]="BadRequest",e[e.Unauthorized=401]="Unauthorized",e[e.PaymentRequired=402]="PaymentRequired",e[e.Forbidden=403]="Forbidden",e[e.NotFound=404]="NotFound",e[e.MethodNotAllowed=405]="MethodNotAllowed",e[e.NotAcceptable=406]="NotAcceptable",e[e.ProxyAuthenticationRequired=407]="ProxyAuthenticationRequired",e[e.RequestTimeout=408]="RequestTimeout",e[e.Conflict=409]="Conflict",e[e.Gone=410]="Gone",e[e.LengthRequired=411]="LengthRequired",e[e.InvalidMedia=415]="InvalidMedia",e[e["I'm a teapot"]=418]="I'm a teapot",e[e.Unprocessable=422]="Unprocessable",e[e.TooManyRequests=429]="TooManyRequests",e[e.ServerError=500]="ServerError",e[e.NotImplemented=501]="NotImplemented",e[e.BadGateway=502]="BadGateway",e[e.ServiceUnavailable=503]="ServiceUnavailable",e[e.GatewayTimeout=504]="GatewayTimeout",e[e.UnknownError=-1]="UnknownError";}(ResponseErrors||(ResponseErrors={}));

function defaultFetch(e,s){return Promise.resolve(new Response(JSON.stringify(defaultFetchHandlerResponseBody(e,s)),defaultFetchHandlerResponseOptions))}const defaultFetchHandlerResponseBody=(e,s)=>Object.assign(Object.assign({error:"Default-fetch-handler response."},void 0===e?{}:{to:e}),void 0===s?{}:{options:s});const defaultFetchHandlerResponseOptions={status:ResponseErrors["I'm a teapot"],statusText:"undefined"!=typeof fetch?"why do you use mee?..":"`fetch` missing in `window`"};

class GenericAPIClient{constructor(e="",r={}){this.$baseURL=e,this.$baseClientConfig=r,this.$fetchHandler=window.fetch?window.fetch.bind(window):defaultFetch;}$request(e,r,s=!1){return e.match(/^(\w+:)?\/\//)||(e=this.$baseURL?new URL(e,this.$baseURL).href:e),this.$requestFactory(e,s?r:Object.assign(Object.assign(Object.assign({},this.$baseClientConfig),r),{headers:Object.assign(Object.assign({},this.$baseClientConfig.headers||{}),r.headers||{})}),this.$fetchHandler)}$responseHandler(e){if(e.ok)return e;throw new ResponseError(GenericAPIClient.handleStatus(e.status),e.status,e)}$errorHandler(e,r,s,t){throw e instanceof ResponseError?e:new ResponseError("Unkown Error: ",ResponseErrors.UnknownError,e,{url:r,config:s,request:t})}$requestFactory(e,r,s){return s(e,r).then((e=>this.$responseHandler(e))).catch((t=>this.$errorHandler(t,e,r,s)))}$alias(e){return function(r,s=this.$baseClientConfig,t){return s.method=e?e.toUpperCase():(s.method||"GET").toUpperCase(),this.$request(r,s,t)}}static handleStatus(e=-1){return ResponseErrors[e]||ResponseErrors[-1]}}

function withQuery(e,n){const t=(e,n)=>`${encodeURIComponent(n)}=${encodeURI(e)}`,o=Object.keys(n).filter((e=>!!e&&void 0!==n[e])).map((e=>Array.isArray(n[e])?t(n[e].join(","),e):t(String(n[e]),e))),r=1!==o.length?o.join("&"):o[0],i=e.indexOf("?")>-1?"&":"?";return e+(r.length>0?i+r:"")}

class JsonAPIClient extends GenericAPIClient{$responseHandler(e){return e.json()}}class TextAPIClient extends GenericAPIClient{$responseHandler(e){return e.text()}}

export { GenericAPIClient, JsonAPIClient, ResponseError, ResponseErrors, ResponseException, TextAPIClient, withQuery };
//# sourceMappingURL=kefetchup.es.js.map
