{"version":3,"file":"kefetchup.iife.js","sources":["../src/errors.ts","../src/defaultFetch.ts","../src/genericClient.ts","../src/util.ts","../src/index.ts"],"sourcesContent":["import { RequestFunction } from './genericClient';\n\nconst safeAppend = (init: string, ...strs: any[]) => [init].concat(strs.filter(_ => _ != null).map(String)).join('\\n');\n\nexport class ResponseError<T = Response> extends Error {\n  constructor(\n    message: string,\n    public status: ResponseErrors,\n    public data?: T,\n    public request?: {\n      url: string;\n      config: RequestInit;\n      request: RequestFunction;\n    }\n  ) {\n    super(message)/* istanbul ignore next: because stupid typescript */;\n    Object.setPrototypeOf(this, ResponseError.prototype);\n    this.name = 'ResponseError';\n  }\n\n  toString() {\n    return safeAppend(this.name + ': ' + this.message, this.data, this.request);\n  }\n}\n\n/**\n * @deprecated use ResponseError instead\n *//* istanbul ignore next */\nexport class ResponseException<T = Response> extends ResponseError<T> {\n  constructor(message: string, status: ResponseErrors, data?: T) {\n    super(message, status, data);\n    this.name = 'ResponseException';\n  }\n}\n\nexport enum ResponseErrors {\n  BadRequest = 400,\n  Unauthorized = 401,\n  PaymentRequired = 402,\n  Forbidden = 403,\n  NotFound = 404,\n  MethodNotAllowed = 405,\n  NotAcceptable = 406,\n  ProxyAuthenticationRequired = 407,\n  RequestTimeout = 408,\n  Conflict = 409,\n  Gone = 410,\n  LengthRequired = 411,\n  InvalidMedia = 415,\n  'I\\'m a teapot' = 418,\n  Unprocessable = 422,\n  TooManyRequests = 429,\n  ServerError = 500,\n  NotImplemented = 501,\n  BadGateway = 502,\n  ServiceUnavailable = 503,\n  GatewayTimeout = 504,\n  UnknownError = -1\n}\n","import { ResponseErrors } from './errors';\n\n/**\n * Default fetch handler\n *\n * @export\n * @param {string} url\n * @param {RequestInit} [options]\n * @returns {Promise<Response>}\n */\nexport function defaultFetch(url: string, options?: RequestInit): Promise<Response> {\n  return Promise.resolve(new Response(\n    JSON.stringify(defaultFetchHandlerResponseBody(url, options)),\n    defaultFetchHandlerResponseOptions\n  ));\n}\n\nexport const defaultFetchHandlerResponseBody = (url: string, options?: RequestInit) => ({\n  error: 'Default-fetch-handler response.',\n\n  // Emulate a behaviour of JSON.stringify that does not enumerate undefined properties\n  ...(url === undefined ? {} : { to: url }),\n  ...(options === undefined ? {} : { options })\n});\n\nexport const defaultFetchHandlerResponseOptions = {\n  status: ResponseErrors[`I'm a teapot`],\n  statusText: (typeof fetch !== 'undefined') ? 'why do you use mee?..' : '`fetch` missing in `window`'\n};\n","import { defaultFetch } from './defaultFetch';\nimport { ResponseError, ResponseErrors } from './errors';\n\nexport type RequestFunction = (url: string, config?: RequestInit) => Promise<Response>;\n\n/**\n * Generic API client with default request.\n * Inherit from this class to create a custom extendable api client.\n *\n * Can be instantiated on its own for simple singular requests.\n */\nexport class GenericAPIClient {\n  public $fetchHandler = window.fetch ? window.fetch.bind(window) : defaultFetch;\n\n  /**\n   * Creates an instance of GenericAPIClient.\n   * @param {string} [$baseURL=''] a base url to prepend to all request urls except for the ones with root urls\n   * @param {RequestInit} [$baseClientConfig={}] a default config for requests\n   */\n  constructor(\n    public readonly $baseURL: string = '',\n    public readonly $baseClientConfig: RequestInit = {}\n  ) {}\n\n  /**\n   * Makes requests using request factory and resolves config merge conflicts.\n   *\n   * @private\n   */\n  private $request(\n    url: string,\n    fetchConfig: RequestInit,\n    overrideDefaultConfig: boolean = false\n  ): Promise<any> {\n    if (!url.match(/^(\\w+:)?\\/\\//)) {\n      url = this.$baseURL ? new URL(url, this.$baseURL).href : url;\n    }\n\n    return this.$requestFactory(\n      url,\n      overrideDefaultConfig ?\n        fetchConfig :\n        {\n          ...this.$baseClientConfig,\n          ...fetchConfig,\n          headers: {\n            ...(this.$baseClientConfig.headers || {}), ...(fetchConfig.headers || {})\n          }\n        },\n      this.$fetchHandler\n    );\n  }\n\n  /**\n   * Processes the response before allowing to return its value from request function.\n   * Override this function to provide custom response interception.\n   * Keep in mind that this function does not have to return a promise.\n   *\n   * @protected\n   * @param {Response} response the response returned from fetchHandler\n   * @returns {*} default: the same response\n   * @memberof GenericAPIClient\n   */\n  protected $responseHandler(response: Response): any {\n    if (response.ok) {\n      return response;\n    } else {\n      throw new ResponseError(GenericAPIClient.handleStatus(response.status), response.status, response);\n    }\n  }\n\n  /**\n   * Processes the request error before allowing to throw it upstack.\n   * Override this function to provide custom response error handling.\n   * Return value instead of throwing for soft error handling.\n   *\n   * @protected\n   * @param e the error catched from the request promise\n   * @param url a url string that would be passed into the request function\n   * @param config a request config that would be passed into the request function\n   * @param request a function that performs a request (for retrying purposes)\n   * @memberof GenericAPIClient\n   */\n  //@ts-ignore\n  protected $errorHandler(e: any, url: string, config: RequestInit, request: RequestFunction): any {\n    if (e instanceof ResponseError) {\n      throw e;\n    } else {\n      // Network error!\n      throw new ResponseError('Unkown Error: ', ResponseErrors.UnknownError, e, {\n        url, config, request\n      });\n    }\n  }\n\n  /**\n   * A general request factory function.\n   * Calls request and error handlers, can be used for pre-processing the url and request config before sending.\n   * Override for a completely custom request & response handling behaviour.\n   *\n   * @protected\n   * @param url a url string that would be passed into the request function\n   * @param config a request config that would be passed into the request function\n   * @param requestFunction\n   */\n  protected $requestFactory(\n    url: string,\n    config: RequestInit,\n    requestFunction: RequestFunction\n  ): Promise<any> {\n    return requestFunction(url, config)\n      .then(r => this.$responseHandler(r))\n      .catch(e => this.$errorHandler(e, url, config, requestFunction));\n  }\n\n  /**\n   * Request method alias factory.\n   * Used to quickly produce alias function for class' decendants.\n   * Override at your own risk.\n   *\n   * @protected\n   * @param {string} method HTTP method (GET, PUT, POST, etc) to alias\n   * @returns an alias function for request\n   * @memberof GenericAPIClient\n   */\n  protected $alias(method: string) {\n    return function (this: GenericAPIClient,\n      url: string,\n      fetchConfig: RequestInit = this.$baseClientConfig,\n      overrideDefaultConfig?: boolean\n    ): ReturnType<typeof this['$request']> {\n      fetchConfig.method = method ? method.toUpperCase() : (fetchConfig.method || 'GET').toUpperCase();\n      return this.$request(url, fetchConfig, overrideDefaultConfig);\n    }\n  }\n\n  /**\n   * Retrieves response status string in a readable format from a status number\n   *\n   * @param {number|string} [status=-1] Response status (200, 404, 500, etc)\n   * @returns {string} a status literal for logging\n   */\n  public static handleStatus(status?: number): string;\n\n  /**\n   * Retrieves response status number from a readable PascalCase string\n   *\n   * @param {number|string} [status=-1] Response status (\"NotFound\", \"OK\", \"Unknown\", etc)\n   * @returns {number} a status number for requests\n   */\n  public static handleStatus(status: keyof typeof ResponseErrors): number;\n\n  public static handleStatus(status: keyof typeof ResponseErrors | number = -1) {\n    return ResponseErrors[status] || ResponseErrors[-1];\n  }\n}\n","/**\n * Encode an object into the plain URL as url-query-string\n *\n * ```js\nwithQuery('/list', {\n  amount: 5,\n  filters: ['price', 'date']\n})```\n *\n * returns\n * ```js\n'/list?amount=5&filters=price,date'```\n *\n * @param {String} url a url to encode params into\n * @param {Object} queryParams query params in object form\n * @returns url with encoded params\n */\nexport function withQuery<T extends Record<string, unknown>>(url: string, queryParams: T) {\n  const encodeQuery = (value: string, key: string) => `${encodeURIComponent(key)}=${encodeURI(value)}`;\n\n  const queryArr = Object.keys(queryParams)\n    .filter(k => !!k && queryParams[k] !== undefined)\n    .map((k) => {\n      if (Array.isArray(queryParams[k])) {\n        return encodeQuery((queryParams[k] as Array<unknown>).join(','), k);\n      }\n\n      return encodeQuery(String(queryParams[k]), k);\n    });\n\n  const queryStr = queryArr.length !== 1 ? queryArr.join('&') : queryArr[0];\n\n  const prefix = (url.indexOf('?') > -1 ? '&' : '?');\n\n  return url + (queryStr.length > 0 ? prefix + queryStr : '');\n}\n","import { GenericAPIClient } from './genericClient';\n\nexport * from './genericClient';\nexport * from './errors';\nexport * from './util';\n\n/**\n * @inheritdoc\n */\nexport class JsonAPIClient extends GenericAPIClient {\n  /**\n   * @inheritdoc\n   */\n  $responseHandler(resp: Response): Promise<unknown> {\n    return resp.json();\n  }\n}\n\n/**\n * @inheritdoc\n */\nexport class TextAPIClient extends GenericAPIClient {\n  /**\n   * @inheritdoc\n   */\n  $responseHandler(resp: Response) {\n    return resp.text();\n  }\n}\n"],"names":["ResponseErrors"],"mappings":"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"}