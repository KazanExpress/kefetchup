{"version":3,"file":"kefetchup.es.js","sources":["../src/errors.ts","../src/defaultFetch.ts","../src/genericClient.ts","../src/util.ts","../src/index.ts"],"sourcesContent":["import { RequestFunction } from './genericClient';\n\nconst safeAppend = (init: string, ...strs: any[]) => [init].concat(strs.filter(_ => _ != null).map(String)).join('\\n');\n\nexport class ResponseError<T = Response> extends Error {\n  constructor(\n    message: string,\n    public status: ResponseErrors,\n    public data?: T,\n    public request?: {\n      url: string;\n      config: RequestInit;\n      request: RequestFunction;\n    }\n  ) {\n    super(message)/* istanbul ignore next: because stupid typescript */;\n    Object.setPrototypeOf(this, ResponseError.prototype);\n    this.name = 'ResponseError';\n  }\n\n  toString() {\n    return safeAppend(this.name + ': ' + this.message, this.data, this.request);\n  }\n}\n\n/**\n * @deprecated use ResponseError instead\n *//* istanbul ignore next */\nexport class ResponseException<T = Response> extends ResponseError<T> {\n  constructor(message: string, status: ResponseErrors, data?: T) {\n    super(message, status, data);\n    this.name = 'ResponseException';\n  }\n}\n\nexport enum ResponseErrors {\n  BadRequest = 400,\n  Unauthorized = 401,\n  PaymentRequired = 402,\n  Forbidden = 403,\n  NotFound = 404,\n  MethodNotAllowed = 405,\n  NotAcceptable = 406,\n  ProxyAuthenticationRequired = 407,\n  RequestTimeout = 408,\n  Conflict = 409,\n  Gone = 410,\n  LengthRequired = 411,\n  InvalidMedia = 415,\n  'I\\'m a teapot' = 418,\n  Unprocessable = 422,\n  TooManyRequests = 429,\n  ServerError = 500,\n  NotImplemented = 501,\n  BadGateway = 502,\n  ServiceUnavailable = 503,\n  GatewayTimeout = 504,\n  UnknownError = -1\n}\n","import { ResponseErrors } from './errors';\n\n/**\n * Default fetch handler\n *\n * @export\n * @param {string} url\n * @param {RequestInit} [options]\n * @returns {Promise<Response>}\n */\nexport function defaultFetch(url: string, options?: RequestInit): Promise<Response> {\n  return Promise.resolve(new Response(\n    JSON.stringify(defaultFetchHandlerResponseBody(url, options)),\n    defaultFetchHandlerResponseOptions\n  ));\n}\n\nexport const defaultFetchHandlerResponseBody = (url: string, options?: RequestInit) => ({\n  error: 'Default-fetch-handler response.',\n\n  // Emulate a behaviour of JSON.stringify that does not enumerate undefined properties\n  ...(url === undefined ? {} : { to: url }),\n  ...(options === undefined ? {} : { options })\n});\n\nexport const defaultFetchHandlerResponseOptions = {\n  status: ResponseErrors[`I'm a teapot`],\n  statusText: (typeof fetch !== 'undefined') ? 'why do you use mee?..' : '`fetch` missing in `window`'\n};\n","import { defaultFetch } from './defaultFetch';\nimport { ResponseError, ResponseErrors } from './errors';\n\nexport type RequestFunction = (url: string, config?: RequestInit) => Promise<Response>;\n\n/**\n * Generic API client with default request.\n * Inherit from this class to create a custom extendable api client.\n *\n * Can be instantiated on its own for simple singular requests.\n */\nexport class GenericAPIClient {\n  public $fetchHandler = window.fetch ? window.fetch.bind(window) : defaultFetch;\n\n  /**\n   * Creates an instance of GenericAPIClient.\n   * @param {string} [$baseURL=''] a base url to prepend to all request urls except for the ones with root urls\n   * @param {RequestInit} [$baseClientConfig={}] a default config for requests\n   */\n  constructor(\n    public readonly $baseURL: string = '',\n    public readonly $baseClientConfig: RequestInit = {}\n  ) {}\n\n  /**\n   * Makes requests using request factory and resolves config merge conflicts.\n   *\n   * @private\n   */\n  private $request(\n    url: string,\n    fetchConfig: RequestInit,\n    overrideDefaultConfig: boolean = false\n  ): Promise<any> {\n    if (!url.match(/^(\\w+:)?\\/\\//)) {\n      url = this.$baseURL ? new URL(url, this.$baseURL).href : url;\n    }\n\n    return this.$requestFactory(\n      url,\n      overrideDefaultConfig ?\n        fetchConfig :\n        {\n          ...this.$baseClientConfig,\n          ...fetchConfig,\n          headers: {\n            ...(this.$baseClientConfig.headers || {}), ...(fetchConfig.headers || {})\n          }\n        },\n      this.$fetchHandler\n    );\n  }\n\n  /**\n   * Processes the response before allowing to return its value from request function.\n   * Override this function to provide custom response interception.\n   * Keep in mind that this function does not have to return a promise.\n   *\n   * @protected\n   * @param {Response} response the response returned from fetchHandler\n   * @returns {*} default: the same response\n   * @memberof GenericAPIClient\n   */\n  protected $responseHandler(response: Response): any {\n    if (response.ok) {\n      return response;\n    } else {\n      throw new ResponseError(GenericAPIClient.handleStatus(response.status), response.status, response);\n    }\n  }\n\n  /**\n   * Processes the request error before allowing to throw it upstack.\n   * Override this function to provide custom response error handling.\n   * Return value instead of throwing for soft error handling.\n   *\n   * @protected\n   * @param e the error catched from the request promise\n   * @param url a url string that would be passed into the request function\n   * @param config a request config that would be passed into the request function\n   * @param request a function that performs a request (for retrying purposes)\n   * @memberof GenericAPIClient\n   */\n  //@ts-ignore\n  protected $errorHandler(e: any, url: string, config: RequestInit, request: RequestFunction): any {\n    if (e instanceof ResponseError) {\n      throw e;\n    } else {\n      // Network error!\n      throw new ResponseError('Unkown Error: ', ResponseErrors.UnknownError, e, {\n        url, config, request\n      });\n    }\n  }\n\n  /**\n   * A general request factory function.\n   * Calls request and error handlers, can be used for pre-processing the url and request config before sending.\n   * Override for a completely custom request & response handling behaviour.\n   *\n   * @protected\n   * @param url a url string that would be passed into the request function\n   * @param config a request config that would be passed into the request function\n   * @param requestFunction\n   */\n  protected $requestFactory(\n    url: string,\n    config: RequestInit,\n    requestFunction: RequestFunction\n  ): Promise<any> {\n    return requestFunction(url, config)\n      .then(r => this.$responseHandler(r))\n      .catch(e => this.$errorHandler(e, url, config, requestFunction));\n  }\n\n  /**\n   * Request method alias factory.\n   * Used to quickly produce alias function for class' decendants.\n   * Override at your own risk.\n   *\n   * @protected\n   * @param {string} method HTTP method (GET, PUT, POST, etc) to alias\n   * @returns an alias function for request\n   * @memberof GenericAPIClient\n   */\n  protected $alias(method: string) {\n    return function (this: GenericAPIClient,\n      url: string,\n      fetchConfig: RequestInit = this.$baseClientConfig,\n      overrideDefaultConfig?: boolean\n    ): ReturnType<typeof this['$request']> {\n      fetchConfig.method = method ? method.toUpperCase() : (fetchConfig.method || 'GET').toUpperCase();\n      return this.$request(url, fetchConfig, overrideDefaultConfig);\n    }\n  }\n\n  /**\n   * Retrieves response status string in a readable format from a status number\n   *\n   * @param {number|string} [status=-1] Response status (200, 404, 500, etc)\n   * @returns {string} a status literal for logging\n   */\n  public static handleStatus(status?: number): string;\n\n  /**\n   * Retrieves response status number from a readable PascalCase string\n   *\n   * @param {number|string} [status=-1] Response status (\"NotFound\", \"OK\", \"Unknown\", etc)\n   * @returns {number} a status number for requests\n   */\n  public static handleStatus(status: keyof typeof ResponseErrors): number;\n\n  public static handleStatus(status: keyof typeof ResponseErrors | number = -1) {\n    return ResponseErrors[status] || ResponseErrors[-1];\n  }\n}\n","/**\n * Encode an object into the plain URL as url-query-string\n *\n * ```js\nwithQuery('/list', {\n  amount: 5,\n  filters: ['price', 'date']\n})```\n *\n * returns\n * ```js\n'/list?amount=5&filters=price,date'```\n *\n * @param {String} url a url to encode params into\n * @param {Object} queryParams query params in object form\n * @returns url with encoded params\n */\nexport function withQuery<T extends Record<string, unknown>>(url: string, queryParams: T) {\n  const encodeQuery = (value: string, key: string) => `${encodeURIComponent(key)}=${encodeURI(value)}`;\n\n  const queryArr = Object.keys(queryParams)\n    .filter(k => !!k && queryParams[k] !== undefined)\n    .map((k) => {\n      if (Array.isArray(queryParams[k])) {\n        return encodeQuery((queryParams[k] as Array<unknown>).join(','), k);\n      }\n\n      return encodeQuery(String(queryParams[k]), k);\n    });\n\n  const queryStr = queryArr.length !== 1 ? queryArr.join('&') : queryArr[0];\n\n  const prefix = (url.indexOf('?') > -1 ? '&' : '?');\n\n  return url + (queryStr.length > 0 ? prefix + queryStr : '');\n}\n","import { GenericAPIClient } from './genericClient';\n\nexport * from './genericClient';\nexport * from './errors';\nexport * from './util';\n\n/**\n * @inheritdoc\n */\nexport class JsonAPIClient extends GenericAPIClient {\n  /**\n   * @inheritdoc\n   */\n  $responseHandler(resp: Response): Promise<unknown> {\n    return resp.json();\n  }\n}\n\n/**\n * @inheritdoc\n */\nexport class TextAPIClient extends GenericAPIClient {\n  /**\n   * @inheritdoc\n   */\n  $responseHandler(resp: Response) {\n    return resp.text();\n  }\n}\n"],"names":[],"mappings":"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"}